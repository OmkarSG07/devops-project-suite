/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 239.0, "minX": 0.0, "maxY": 14794.0, "series": [{"data": [[0.0, 239.0], [0.1, 248.0], [0.2, 252.0], [0.3, 255.0], [0.4, 257.0], [0.5, 258.0], [0.6, 260.0], [0.7, 261.0], [0.8, 262.0], [0.9, 263.0], [1.0, 264.0], [1.1, 265.0], [1.2, 266.0], [1.3, 267.0], [1.4, 268.0], [1.5, 269.0], [1.6, 269.0], [1.7, 270.0], [1.8, 270.0], [1.9, 271.0], [2.0, 272.0], [2.1, 272.0], [2.2, 273.0], [2.3, 273.0], [2.4, 274.0], [2.5, 275.0], [2.6, 275.0], [2.7, 276.0], [2.8, 276.0], [2.9, 277.0], [3.0, 277.0], [3.1, 278.0], [3.2, 279.0], [3.3, 279.0], [3.4, 280.0], [3.5, 280.0], [3.6, 281.0], [3.7, 281.0], [3.8, 282.0], [3.9, 283.0], [4.0, 283.0], [4.1, 283.0], [4.2, 284.0], [4.3, 285.0], [4.4, 285.0], [4.5, 286.0], [4.6, 286.0], [4.7, 287.0], [4.8, 287.0], [4.9, 288.0], [5.0, 289.0], [5.1, 289.0], [5.2, 290.0], [5.3, 290.0], [5.4, 291.0], [5.5, 291.0], [5.6, 292.0], [5.7, 292.0], [5.8, 293.0], [5.9, 293.0], [6.0, 294.0], [6.1, 294.0], [6.2, 295.0], [6.3, 295.0], [6.4, 295.0], [6.5, 296.0], [6.6, 296.0], [6.7, 297.0], [6.8, 297.0], [6.9, 298.0], [7.0, 298.0], [7.1, 299.0], [7.2, 299.0], [7.3, 300.0], [7.4, 300.0], [7.5, 301.0], [7.6, 301.0], [7.7, 301.0], [7.8, 302.0], [7.9, 303.0], [8.0, 303.0], [8.1, 304.0], [8.2, 304.0], [8.3, 305.0], [8.4, 305.0], [8.5, 305.0], [8.6, 306.0], [8.7, 306.0], [8.8, 307.0], [8.9, 307.0], [9.0, 307.0], [9.1, 308.0], [9.2, 308.0], [9.3, 308.0], [9.4, 309.0], [9.5, 309.0], [9.6, 310.0], [9.7, 310.0], [9.8, 310.0], [9.9, 311.0], [10.0, 311.0], [10.1, 312.0], [10.2, 312.0], [10.3, 312.0], [10.4, 313.0], [10.5, 313.0], [10.6, 314.0], [10.7, 314.0], [10.8, 315.0], [10.9, 315.0], [11.0, 316.0], [11.1, 316.0], [11.2, 316.0], [11.3, 317.0], [11.4, 317.0], [11.5, 317.0], [11.6, 318.0], [11.7, 318.0], [11.8, 319.0], [11.9, 319.0], [12.0, 319.0], [12.1, 320.0], [12.2, 320.0], [12.3, 321.0], [12.4, 321.0], [12.5, 321.0], [12.6, 322.0], [12.7, 322.0], [12.8, 322.0], [12.9, 323.0], [13.0, 323.0], [13.1, 324.0], [13.2, 324.0], [13.3, 325.0], [13.4, 326.0], [13.5, 326.0], [13.6, 327.0], [13.7, 327.0], [13.8, 327.0], [13.9, 328.0], [14.0, 328.0], [14.1, 329.0], [14.2, 329.0], [14.3, 330.0], [14.4, 330.0], [14.5, 330.0], [14.6, 331.0], [14.7, 331.0], [14.8, 332.0], [14.9, 332.0], [15.0, 333.0], [15.1, 333.0], [15.2, 334.0], [15.3, 334.0], [15.4, 335.0], [15.5, 335.0], [15.6, 336.0], [15.7, 336.0], [15.8, 336.0], [15.9, 337.0], [16.0, 337.0], [16.1, 338.0], [16.2, 338.0], [16.3, 338.0], [16.4, 339.0], [16.5, 339.0], [16.6, 339.0], [16.7, 340.0], [16.8, 340.0], [16.9, 341.0], [17.0, 341.0], [17.1, 341.0], [17.2, 342.0], [17.3, 342.0], [17.4, 343.0], [17.5, 343.0], [17.6, 343.0], [17.7, 344.0], [17.8, 344.0], [17.9, 345.0], [18.0, 345.0], [18.1, 345.0], [18.2, 346.0], [18.3, 346.0], [18.4, 346.0], [18.5, 347.0], [18.6, 347.0], [18.7, 348.0], [18.8, 348.0], [18.9, 348.0], [19.0, 349.0], [19.1, 349.0], [19.2, 350.0], [19.3, 350.0], [19.4, 350.0], [19.5, 351.0], [19.6, 351.0], [19.7, 352.0], [19.8, 352.0], [19.9, 352.0], [20.0, 353.0], [20.1, 353.0], [20.2, 354.0], [20.3, 354.0], [20.4, 355.0], [20.5, 355.0], [20.6, 355.0], [20.7, 356.0], [20.8, 357.0], [20.9, 357.0], [21.0, 358.0], [21.1, 358.0], [21.2, 359.0], [21.3, 359.0], [21.4, 360.0], [21.5, 360.0], [21.6, 360.0], [21.7, 361.0], [21.8, 361.0], [21.9, 362.0], [22.0, 362.0], [22.1, 363.0], [22.2, 363.0], [22.3, 363.0], [22.4, 364.0], [22.5, 364.0], [22.6, 365.0], [22.7, 365.0], [22.8, 366.0], [22.9, 366.0], [23.0, 366.0], [23.1, 367.0], [23.2, 367.0], [23.3, 367.0], [23.4, 368.0], [23.5, 368.0], [23.6, 368.0], [23.7, 369.0], [23.8, 369.0], [23.9, 370.0], [24.0, 370.0], [24.1, 371.0], [24.2, 371.0], [24.3, 371.0], [24.4, 372.0], [24.5, 372.0], [24.6, 373.0], [24.7, 373.0], [24.8, 373.0], [24.9, 374.0], [25.0, 374.0], [25.1, 374.0], [25.2, 375.0], [25.3, 375.0], [25.4, 375.0], [25.5, 376.0], [25.6, 376.0], [25.7, 377.0], [25.8, 377.0], [25.9, 378.0], [26.0, 378.0], [26.1, 378.0], [26.2, 379.0], [26.3, 379.0], [26.4, 379.0], [26.5, 380.0], [26.6, 380.0], [26.7, 381.0], [26.8, 381.0], [26.9, 381.0], [27.0, 382.0], [27.1, 383.0], [27.2, 383.0], [27.3, 384.0], [27.4, 384.0], [27.5, 385.0], [27.6, 385.0], [27.7, 386.0], [27.8, 386.0], [27.9, 387.0], [28.0, 387.0], [28.1, 388.0], [28.2, 388.0], [28.3, 389.0], [28.4, 389.0], [28.5, 390.0], [28.6, 390.0], [28.7, 391.0], [28.8, 391.0], [28.9, 391.0], [29.0, 392.0], [29.1, 392.0], [29.2, 393.0], [29.3, 393.0], [29.4, 394.0], [29.5, 394.0], [29.6, 394.0], [29.7, 395.0], [29.8, 395.0], [29.9, 396.0], [30.0, 396.0], [30.1, 397.0], [30.2, 397.0], [30.3, 398.0], [30.4, 398.0], [30.5, 399.0], [30.6, 399.0], [30.7, 400.0], [30.8, 400.0], [30.9, 401.0], [31.0, 402.0], [31.1, 402.0], [31.2, 402.0], [31.3, 403.0], [31.4, 403.0], [31.5, 404.0], [31.6, 404.0], [31.7, 405.0], [31.8, 405.0], [31.9, 406.0], [32.0, 406.0], [32.1, 407.0], [32.2, 407.0], [32.3, 408.0], [32.4, 408.0], [32.5, 409.0], [32.6, 409.0], [32.7, 410.0], [32.8, 410.0], [32.9, 410.0], [33.0, 411.0], [33.1, 412.0], [33.2, 412.0], [33.3, 413.0], [33.4, 413.0], [33.5, 413.0], [33.6, 414.0], [33.7, 414.0], [33.8, 415.0], [33.9, 416.0], [34.0, 416.0], [34.1, 416.0], [34.2, 417.0], [34.3, 417.0], [34.4, 418.0], [34.5, 418.0], [34.6, 419.0], [34.7, 419.0], [34.8, 420.0], [34.9, 420.0], [35.0, 421.0], [35.1, 421.0], [35.2, 422.0], [35.3, 422.0], [35.4, 423.0], [35.5, 423.0], [35.6, 424.0], [35.7, 424.0], [35.8, 425.0], [35.9, 425.0], [36.0, 426.0], [36.1, 426.0], [36.2, 427.0], [36.3, 427.0], [36.4, 428.0], [36.5, 429.0], [36.6, 429.0], [36.7, 430.0], [36.8, 430.0], [36.9, 431.0], [37.0, 431.0], [37.1, 432.0], [37.2, 432.0], [37.3, 432.0], [37.4, 433.0], [37.5, 433.0], [37.6, 434.0], [37.7, 434.0], [37.8, 435.0], [37.9, 435.0], [38.0, 435.0], [38.1, 436.0], [38.2, 436.0], [38.3, 437.0], [38.4, 437.0], [38.5, 437.0], [38.6, 438.0], [38.7, 438.0], [38.8, 439.0], [38.9, 439.0], [39.0, 439.0], [39.1, 440.0], [39.2, 440.0], [39.3, 440.0], [39.4, 441.0], [39.5, 441.0], [39.6, 441.0], [39.7, 442.0], [39.8, 442.0], [39.9, 443.0], [40.0, 443.0], [40.1, 443.0], [40.2, 444.0], [40.3, 444.0], [40.4, 444.0], [40.5, 445.0], [40.6, 445.0], [40.7, 445.0], [40.8, 446.0], [40.9, 446.0], [41.0, 446.0], [41.1, 446.0], [41.2, 447.0], [41.3, 447.0], [41.4, 447.0], [41.5, 447.0], [41.6, 448.0], [41.7, 448.0], [41.8, 448.0], [41.9, 448.0], [42.0, 449.0], [42.1, 449.0], [42.2, 449.0], [42.3, 449.0], [42.4, 450.0], [42.5, 450.0], [42.6, 450.0], [42.7, 451.0], [42.8, 451.0], [42.9, 451.0], [43.0, 451.0], [43.1, 452.0], [43.2, 452.0], [43.3, 452.0], [43.4, 452.0], [43.5, 452.0], [43.6, 453.0], [43.7, 453.0], [43.8, 453.0], [43.9, 453.0], [44.0, 454.0], [44.1, 454.0], [44.2, 454.0], [44.3, 454.0], [44.4, 454.0], [44.5, 455.0], [44.6, 455.0], [44.7, 455.0], [44.8, 455.0], [44.9, 455.0], [45.0, 456.0], [45.1, 456.0], [45.2, 456.0], [45.3, 456.0], [45.4, 456.0], [45.5, 456.0], [45.6, 457.0], [45.7, 457.0], [45.8, 457.0], [45.9, 457.0], [46.0, 457.0], [46.1, 458.0], [46.2, 458.0], [46.3, 458.0], [46.4, 458.0], [46.5, 458.0], [46.6, 458.0], [46.7, 459.0], [46.8, 459.0], [46.9, 459.0], [47.0, 459.0], [47.1, 459.0], [47.2, 459.0], [47.3, 460.0], [47.4, 460.0], [47.5, 460.0], [47.6, 460.0], [47.7, 460.0], [47.8, 460.0], [47.9, 461.0], [48.0, 461.0], [48.1, 461.0], [48.2, 461.0], [48.3, 461.0], [48.4, 461.0], [48.5, 462.0], [48.6, 462.0], [48.7, 462.0], [48.8, 462.0], [48.9, 462.0], [49.0, 462.0], [49.1, 463.0], [49.2, 463.0], [49.3, 463.0], [49.4, 463.0], [49.5, 463.0], [49.6, 463.0], [49.7, 463.0], [49.8, 464.0], [49.9, 464.0], [50.0, 464.0], [50.1, 464.0], [50.2, 464.0], [50.3, 464.0], [50.4, 464.0], [50.5, 465.0], [50.6, 465.0], [50.7, 465.0], [50.8, 465.0], [50.9, 465.0], [51.0, 465.0], [51.1, 465.0], [51.2, 465.0], [51.3, 466.0], [51.4, 466.0], [51.5, 466.0], [51.6, 466.0], [51.7, 466.0], [51.8, 466.0], [51.9, 466.0], [52.0, 467.0], [52.1, 467.0], [52.2, 467.0], [52.3, 467.0], [52.4, 467.0], [52.5, 467.0], [52.6, 467.0], [52.7, 467.0], [52.8, 468.0], [52.9, 468.0], [53.0, 468.0], [53.1, 468.0], [53.2, 468.0], [53.3, 468.0], [53.4, 468.0], [53.5, 469.0], [53.6, 469.0], [53.7, 469.0], [53.8, 469.0], [53.9, 469.0], [54.0, 469.0], [54.1, 469.0], [54.2, 469.0], [54.3, 470.0], [54.4, 470.0], [54.5, 470.0], [54.6, 470.0], [54.7, 470.0], [54.8, 470.0], [54.9, 470.0], [55.0, 470.0], [55.1, 471.0], [55.2, 471.0], [55.3, 471.0], [55.4, 471.0], [55.5, 471.0], [55.6, 471.0], [55.7, 472.0], [55.8, 472.0], [55.9, 472.0], [56.0, 472.0], [56.1, 472.0], [56.2, 472.0], [56.3, 472.0], [56.4, 473.0], [56.5, 473.0], [56.6, 473.0], [56.7, 473.0], [56.8, 473.0], [56.9, 473.0], [57.0, 474.0], [57.1, 474.0], [57.2, 474.0], [57.3, 474.0], [57.4, 474.0], [57.5, 474.0], [57.6, 474.0], [57.7, 475.0], [57.8, 475.0], [57.9, 475.0], [58.0, 475.0], [58.1, 475.0], [58.2, 475.0], [58.3, 476.0], [58.4, 476.0], [58.5, 476.0], [58.6, 476.0], [58.7, 476.0], [58.8, 476.0], [58.9, 477.0], [59.0, 477.0], [59.1, 477.0], [59.2, 477.0], [59.3, 477.0], [59.4, 477.0], [59.5, 478.0], [59.6, 478.0], [59.7, 478.0], [59.8, 478.0], [59.9, 478.0], [60.0, 479.0], [60.1, 479.0], [60.2, 479.0], [60.3, 479.0], [60.4, 479.0], [60.5, 479.0], [60.6, 480.0], [60.7, 480.0], [60.8, 480.0], [60.9, 480.0], [61.0, 480.0], [61.1, 481.0], [61.2, 481.0], [61.3, 481.0], [61.4, 481.0], [61.5, 482.0], [61.6, 482.0], [61.7, 482.0], [61.8, 482.0], [61.9, 482.0], [62.0, 483.0], [62.1, 483.0], [62.2, 483.0], [62.3, 483.0], [62.4, 483.0], [62.5, 484.0], [62.6, 484.0], [62.7, 484.0], [62.8, 484.0], [62.9, 485.0], [63.0, 485.0], [63.1, 485.0], [63.2, 485.0], [63.3, 486.0], [63.4, 486.0], [63.5, 486.0], [63.6, 487.0], [63.7, 487.0], [63.8, 487.0], [63.9, 487.0], [64.0, 488.0], [64.1, 488.0], [64.2, 488.0], [64.3, 489.0], [64.4, 489.0], [64.5, 489.0], [64.6, 490.0], [64.7, 490.0], [64.8, 490.0], [64.9, 491.0], [65.0, 491.0], [65.1, 491.0], [65.2, 492.0], [65.3, 492.0], [65.4, 493.0], [65.5, 493.0], [65.6, 493.0], [65.7, 494.0], [65.8, 494.0], [65.9, 494.0], [66.0, 495.0], [66.1, 495.0], [66.2, 495.0], [66.3, 496.0], [66.4, 496.0], [66.5, 496.0], [66.6, 497.0], [66.7, 497.0], [66.8, 498.0], [66.9, 498.0], [67.0, 498.0], [67.1, 499.0], [67.2, 499.0], [67.3, 500.0], [67.4, 500.0], [67.5, 501.0], [67.6, 501.0], [67.7, 502.0], [67.8, 502.0], [67.9, 503.0], [68.0, 503.0], [68.1, 503.0], [68.2, 504.0], [68.3, 504.0], [68.4, 505.0], [68.5, 505.0], [68.6, 506.0], [68.7, 506.0], [68.8, 507.0], [68.9, 507.0], [69.0, 508.0], [69.1, 508.0], [69.2, 509.0], [69.3, 509.0], [69.4, 510.0], [69.5, 511.0], [69.6, 511.0], [69.7, 512.0], [69.8, 513.0], [69.9, 513.0], [70.0, 514.0], [70.1, 514.0], [70.2, 515.0], [70.3, 515.0], [70.4, 516.0], [70.5, 517.0], [70.6, 517.0], [70.7, 518.0], [70.8, 519.0], [70.9, 520.0], [71.0, 520.0], [71.1, 521.0], [71.2, 521.0], [71.3, 522.0], [71.4, 523.0], [71.5, 524.0], [71.6, 524.0], [71.7, 525.0], [71.8, 525.0], [71.9, 526.0], [72.0, 527.0], [72.1, 529.0], [72.2, 530.0], [72.3, 531.0], [72.4, 532.0], [72.5, 533.0], [72.6, 534.0], [72.7, 535.0], [72.8, 536.0], [72.9, 536.0], [73.0, 537.0], [73.1, 538.0], [73.2, 539.0], [73.3, 540.0], [73.4, 541.0], [73.5, 542.0], [73.6, 543.0], [73.7, 543.0], [73.8, 544.0], [73.9, 545.0], [74.0, 546.0], [74.1, 547.0], [74.2, 548.0], [74.3, 548.0], [74.4, 549.0], [74.5, 550.0], [74.6, 551.0], [74.7, 551.0], [74.8, 553.0], [74.9, 554.0], [75.0, 555.0], [75.1, 556.0], [75.2, 558.0], [75.3, 559.0], [75.4, 561.0], [75.5, 562.0], [75.6, 563.0], [75.7, 564.0], [75.8, 565.0], [75.9, 567.0], [76.0, 568.0], [76.1, 570.0], [76.2, 572.0], [76.3, 574.0], [76.4, 575.0], [76.5, 576.0], [76.6, 578.0], [76.7, 580.0], [76.8, 581.0], [76.9, 583.0], [77.0, 585.0], [77.1, 586.0], [77.2, 587.0], [77.3, 589.0], [77.4, 590.0], [77.5, 592.0], [77.6, 593.0], [77.7, 595.0], [77.8, 597.0], [77.9, 599.0], [78.0, 601.0], [78.1, 602.0], [78.2, 604.0], [78.3, 606.0], [78.4, 607.0], [78.5, 609.0], [78.6, 611.0], [78.7, 615.0], [78.8, 617.0], [78.9, 619.0], [79.0, 622.0], [79.1, 623.0], [79.2, 625.0], [79.3, 626.0], [79.4, 628.0], [79.5, 630.0], [79.6, 633.0], [79.7, 634.0], [79.8, 636.0], [79.9, 639.0], [80.0, 641.0], [80.1, 644.0], [80.2, 647.0], [80.3, 648.0], [80.4, 650.0], [80.5, 651.0], [80.6, 653.0], [80.7, 654.0], [80.8, 655.0], [80.9, 656.0], [81.0, 658.0], [81.1, 659.0], [81.2, 660.0], [81.3, 662.0], [81.4, 663.0], [81.5, 665.0], [81.6, 666.0], [81.7, 667.0], [81.8, 668.0], [81.9, 669.0], [82.0, 670.0], [82.1, 671.0], [82.2, 672.0], [82.3, 673.0], [82.4, 674.0], [82.5, 675.0], [82.6, 676.0], [82.7, 677.0], [82.8, 679.0], [82.9, 680.0], [83.0, 681.0], [83.1, 683.0], [83.2, 685.0], [83.3, 687.0], [83.4, 689.0], [83.5, 691.0], [83.6, 692.0], [83.7, 694.0], [83.8, 696.0], [83.9, 698.0], [84.0, 702.0], [84.1, 706.0], [84.2, 708.0], [84.3, 710.0], [84.4, 714.0], [84.5, 716.0], [84.6, 718.0], [84.7, 721.0], [84.8, 725.0], [84.9, 728.0], [85.0, 731.0], [85.1, 732.0], [85.2, 735.0], [85.3, 740.0], [85.4, 744.0], [85.5, 747.0], [85.6, 749.0], [85.7, 752.0], [85.8, 755.0], [85.9, 757.0], [86.0, 761.0], [86.1, 763.0], [86.2, 766.0], [86.3, 773.0], [86.4, 776.0], [86.5, 783.0], [86.6, 789.0], [86.7, 793.0], [86.8, 798.0], [86.9, 802.0], [87.0, 811.0], [87.1, 820.0], [87.2, 823.0], [87.3, 828.0], [87.4, 836.0], [87.5, 844.0], [87.6, 853.0], [87.7, 857.0], [87.8, 865.0], [87.9, 869.0], [88.0, 873.0], [88.1, 877.0], [88.2, 882.0], [88.3, 888.0], [88.4, 896.0], [88.5, 903.0], [88.6, 912.0], [88.7, 926.0], [88.8, 941.0], [88.9, 955.0], [89.0, 963.0], [89.1, 979.0], [89.2, 999.0], [89.3, 1020.0], [89.4, 1044.0], [89.5, 1061.0], [89.6, 1090.0], [89.7, 1116.0], [89.8, 1156.0], [89.9, 1179.0], [90.0, 1231.0], [90.1, 1268.0], [90.2, 1274.0], [90.3, 1283.0], [90.4, 1301.0], [90.5, 1312.0], [90.6, 1320.0], [90.7, 1335.0], [90.8, 1351.0], [90.9, 1362.0], [91.0, 1372.0], [91.1, 1380.0], [91.2, 1390.0], [91.3, 1398.0], [91.4, 1410.0], [91.5, 1422.0], [91.6, 1431.0], [91.7, 1439.0], [91.8, 1447.0], [91.9, 1452.0], [92.0, 1456.0], [92.1, 1459.0], [92.2, 1462.0], [92.3, 1465.0], [92.4, 1468.0], [92.5, 1470.0], [92.6, 1473.0], [92.7, 1475.0], [92.8, 1477.0], [92.9, 1479.0], [93.0, 1481.0], [93.1, 1482.0], [93.2, 1484.0], [93.3, 1485.0], [93.4, 1487.0], [93.5, 1489.0], [93.6, 1492.0], [93.7, 1494.0], [93.8, 1497.0], [93.9, 1499.0], [94.0, 1504.0], [94.1, 1507.0], [94.2, 1512.0], [94.3, 1517.0], [94.4, 1523.0], [94.5, 1529.0], [94.6, 1538.0], [94.7, 1545.0], [94.8, 1560.0], [94.9, 1570.0], [95.0, 1582.0], [95.1, 1598.0], [95.2, 1612.0], [95.3, 1627.0], [95.4, 1654.0], [95.5, 1672.0], [95.6, 1682.0], [95.7, 1688.0], [95.8, 1695.0], [95.9, 1703.0], [96.0, 1711.0], [96.1, 1718.0], [96.2, 1737.0], [96.3, 1760.0], [96.4, 1793.0], [96.5, 1830.0], [96.6, 1869.0], [96.7, 1892.0], [96.8, 1905.0], [96.9, 1936.0], [97.0, 2047.0], [97.1, 2067.0], [97.2, 2101.0], [97.3, 2116.0], [97.4, 2148.0], [97.5, 2202.0], [97.6, 2217.0], [97.7, 2301.0], [97.8, 2319.0], [97.9, 2350.0], [98.0, 2429.0], [98.1, 2539.0], [98.2, 2883.0], [98.3, 2965.0], [98.4, 3151.0], [98.5, 3287.0], [98.6, 3428.0], [98.7, 3477.0], [98.8, 3499.0], [98.9, 3523.0], [99.0, 3698.0], [99.1, 3924.0], [99.2, 4478.0], [99.3, 5013.0], [99.4, 6595.0], [99.5, 7685.0], [99.6, 8612.0], [99.7, 10264.0], [99.8, 11483.0], [99.9, 14531.0]], "isOverall": false, "label": "GET Homepage", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 18283.0, "series": [{"data": [[200.0, 3627.0], [300.0, 11707.0], [400.0, 18283.0], [500.0, 5334.0], [600.0, 3019.0], [700.0, 1447.0], [800.0, 806.0], [900.0, 377.0], [1000.0, 212.0], [1100.0, 152.0], [1200.0, 233.0], [1300.0, 463.0], [1400.0, 1290.0], [1500.0, 602.0], [1600.0, 371.0], [1700.0, 289.0], [1800.0, 166.0], [1900.0, 98.0], [2000.0, 117.0], [2100.0, 151.0], [2300.0, 136.0], [2200.0, 104.0], [2400.0, 60.0], [2500.0, 20.0], [2600.0, 15.0], [2700.0, 4.0], [2800.0, 19.0], [2900.0, 70.0], [3000.0, 7.0], [3100.0, 57.0], [3300.0, 28.0], [3200.0, 16.0], [3400.0, 121.0], [3500.0, 81.0], [3600.0, 20.0], [3700.0, 28.0], [3800.0, 14.0], [3900.0, 20.0], [4000.0, 2.0], [4100.0, 3.0], [4200.0, 7.0], [4300.0, 13.0], [4500.0, 10.0], [4600.0, 8.0], [4400.0, 16.0], [4800.0, 7.0], [4700.0, 7.0], [4900.0, 12.0], [5100.0, 3.0], [5000.0, 4.0], [5300.0, 1.0], [5200.0, 1.0], [5600.0, 3.0], [5500.0, 3.0], [5400.0, 3.0], [5800.0, 3.0], [5700.0, 1.0], [6100.0, 2.0], [6000.0, 4.0], [5900.0, 4.0], [6300.0, 3.0], [6200.0, 5.0], [6600.0, 4.0], [6400.0, 5.0], [6500.0, 8.0], [6700.0, 3.0], [6800.0, 4.0], [6900.0, 1.0], [7100.0, 3.0], [7000.0, 3.0], [7300.0, 3.0], [7400.0, 6.0], [7200.0, 6.0], [7600.0, 10.0], [7500.0, 7.0], [7800.0, 1.0], [7700.0, 11.0], [7900.0, 4.0], [8100.0, 9.0], [8000.0, 10.0], [8200.0, 8.0], [8600.0, 5.0], [8400.0, 1.0], [8500.0, 4.0], [8700.0, 2.0], [8900.0, 6.0], [9000.0, 3.0], [8800.0, 3.0], [9200.0, 2.0], [9100.0, 3.0], [9600.0, 5.0], [9500.0, 1.0], [9300.0, 1.0], [9400.0, 4.0], [9700.0, 2.0], [9800.0, 6.0], [10200.0, 6.0], [10000.0, 2.0], [9900.0, 3.0], [10100.0, 1.0], [10400.0, 4.0], [10500.0, 5.0], [10600.0, 4.0], [10700.0, 6.0], [10300.0, 2.0], [10800.0, 6.0], [11100.0, 2.0], [10900.0, 4.0], [11000.0, 3.0], [11400.0, 12.0], [11500.0, 1.0], [11700.0, 1.0], [11600.0, 2.0], [11900.0, 9.0], [11800.0, 2.0], [12000.0, 14.0], [12100.0, 6.0], [12200.0, 1.0], [12400.0, 4.0], [12600.0, 2.0], [12500.0, 1.0], [12300.0, 1.0], [14600.0, 6.0], [14700.0, 42.0], [14500.0, 5.0]], "isOverall": false, "label": "GET Homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 33716.0, "series": [{"data": [[0.0, 33716.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 13246.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3034.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 172.4912621359224, "minX": 1.75191942E12, "maxY": 436.3133758408081, "series": [{"data": [[1.75191954E12, 418.13707182953567], [1.75191942E12, 172.4912621359224], [1.7519196E12, 194.31926500143567], [1.75191948E12, 436.3133758408081]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7519196E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 240.0, "minX": 28.0, "maxY": 10726.312499999998, "series": [{"data": [[28.0, 319.0], [59.0, 614.0], [60.0, 266.0], [67.0, 287.0], [68.0, 710.0], [75.0, 313.3333333333333], [74.0, 294.5], [72.0, 258.0], [79.0, 318.0], [80.0, 256.0], [87.0, 268.0], [84.0, 279.2857142857143], [90.0, 292.16666666666663], [93.0, 336.0], [99.0, 316.2], [98.0, 284.0], [103.0, 289.4], [102.0, 278.0], [107.0, 291.7142857142857], [105.0, 293.0], [104.0, 286.75], [111.0, 332.4], [109.0, 286.0], [115.0, 290.33333333333337], [114.0, 287.0], [113.0, 281.1666666666667], [112.0, 272.0], [117.0, 283.57142857142856], [116.0, 295.0], [123.0, 274.0], [121.0, 300.7333333333333], [120.0, 558.0], [127.0, 308.3333333333333], [126.0, 326.52631578947376], [135.0, 269.2], [133.0, 320.38095238095235], [132.0, 336.4], [131.0, 519.0], [130.0, 352.1428571428571], [129.0, 286.55555555555554], [143.0, 509.57692307692315], [142.0, 529.0000000000001], [141.0, 458.44999999999993], [139.0, 369.3968253968254], [138.0, 750.0], [137.0, 329.1071428571429], [136.0, 323.27272727272725], [150.0, 278.5555555555555], [149.0, 482.75949367088623], [146.0, 260.625], [145.0, 332.8], [159.0, 10726.312499999998], [154.0, 1302.5], [161.0, 1145.90625], [162.0, 2383.3750000000005], [163.0, 4509.1], [164.0, 3068.879999999999], [165.0, 1394.6176470588236], [166.0, 363.0930232558139], [167.0, 3330.69696969697], [160.0, 483.7142857142857], [170.0, 1833.0909090909092], [171.0, 484.82882882882876], [172.0, 964.1428571428571], [174.0, 1047.4230769230771], [175.0, 407.35955056179773], [173.0, 2476.625000000001], [169.0, 380.75000000000006], [168.0, 1688.3600000000004], [176.0, 385.5735294117648], [177.0, 2104.894736842105], [178.0, 274.0], [179.0, 6595.0], [182.0, 675.2093023255816], [183.0, 361.84705882352944], [180.0, 539.1538461538461], [185.0, 411.87931034482773], [186.0, 532.688888888889], [184.0, 383.0], [191.0, 368.09090909090907], [189.0, 327.0], [188.0, 360.16666666666663], [187.0, 418.258064516129], [194.0, 595.0], [195.0, 313.25], [196.0, 341.03846153846155], [197.0, 332.96610169491515], [198.0, 356.4117647058823], [199.0, 313.81250000000006], [192.0, 291.5625], [200.0, 1178.145038167939], [201.0, 400.44303797468353], [202.0, 383.5413533834586], [203.0, 454.09923664122135], [204.0, 355.81249999999994], [205.0, 372.50793650793645], [206.0, 370.46923076923076], [207.0, 319.2314814814816], [208.0, 357.82178217821786], [209.0, 356.4181818181817], [210.0, 374.29931972789115], [211.0, 416.9440559440559], [212.0, 392.97619047619054], [213.0, 349.4148148148148], [214.0, 328.83132530120486], [215.0, 325.7571428571428], [216.0, 367.9436619718311], [217.0, 370.6811594202899], [218.0, 389.2682926829269], [219.0, 556.1094890510947], [220.0, 640.6212121212121], [221.0, 560.581395348837], [222.0, 389.3968253968253], [223.0, 483.96116504854365], [224.0, 494.0291970802921], [230.0, 465.1292517006803], [228.0, 695.7719298245615], [227.0, 544.6619718309859], [226.0, 758.7419354838711], [225.0, 628.3333333333333], [231.0, 312.10344827586204], [229.0, 312.0588235294118], [235.0, 404.51562500000017], [236.0, 335.96226415094344], [237.0, 350.2739726027398], [239.0, 319.0], [238.0, 346.3333333333333], [234.0, 677.9106145251399], [240.0, 337.8148148148148], [241.0, 347.5], [242.0, 340.61904761904765], [243.0, 348.2688172043012], [244.0, 496.08593749999994], [245.0, 473.1645569620253], [246.0, 395.8157894736842], [247.0, 460.325842696629], [248.0, 376.2948717948719], [249.0, 318.5], [250.0, 277.5], [251.0, 354.9], [252.0, 240.0], [253.0, 330.41463414634154], [254.0, 397.4310344827586], [255.0, 383.78125], [257.0, 424.7364341085273], [256.0, 700.6521739130434], [258.0, 393.6455696202533], [259.0, 557.2711864406778], [260.0, 397.0251396648044], [261.0, 402.66176470588255], [263.0, 585.5079365079364], [262.0, 614.9999999999999], [264.0, 514.1249999999998], [271.0, 478.3333333333333], [268.0, 416.67261904761915], [269.0, 424.925], [265.0, 610.923076923077], [267.0, 332.74999999999983], [266.0, 345.41379310344826], [279.0, 387.4264705882354], [275.0, 528.0781249999999], [274.0, 429.30769230769226], [273.0, 855.6666666666666], [272.0, 271.85714285714283], [284.0, 477.2], [285.0, 317.54166666666663], [286.0, 338.35714285714283], [287.0, 344.73033707865164], [276.0, 420.12244897959175], [277.0, 484.4076923076923], [278.0, 794.4111111111112], [280.0, 318.88235294117646], [281.0, 385.8899999999999], [282.0, 482.07500000000005], [283.0, 301.03703703703707], [289.0, 327.9172413793106], [288.0, 305.0], [290.0, 369.06024096385556], [291.0, 373.42735042735063], [292.0, 562.5258215962442], [293.0, 992.4691358024693], [294.0, 580.1578947368422], [295.0, 466.25], [298.0, 371.8058252427184], [300.0, 479.3741496598639], [302.0, 519.3030303030303], [303.0, 375.73600000000005], [297.0, 422.9999999999999], [296.0, 438.79411764705867], [299.0, 629.3507462686567], [316.0, 347.8507462686567], [304.0, 887.1025641025641], [305.0, 722.5236051502148], [306.0, 464.12121212121207], [307.0, 445.5877192982456], [311.0, 262.0], [308.0, 341.19999999999993], [313.0, 347.95000000000005], [315.0, 286.07142857142856], [317.0, 319.5], [318.0, 283.66666666666663], [319.0, 258.0], [312.0, 344.5], [321.0, 317.6971830985918], [320.0, 330.44444444444446], [322.0, 349.8333333333332], [323.0, 480.49137931034477], [324.0, 576.0196721311474], [325.0, 371.89062499999994], [326.0, 441.0395480225986], [327.0, 528.0], [328.0, 384.31578947368433], [329.0, 460.11023622047253], [335.0, 477.14772727272725], [333.0, 826.2891566265058], [332.0, 1326.4615384615383], [334.0, 383.75], [330.0, 427.5511811023622], [331.0, 1016.2464788732391], [337.0, 460.45454545454544], [336.0, 290.24999999999994], [338.0, 368.47058823529403], [339.0, 484.5166666666666], [340.0, 515.9729729729729], [341.0, 530.5952380952382], [342.0, 410.05514705882376], [343.0, 439.189393939394], [346.0, 361.75], [348.0, 301.90322580645153], [350.0, 430.91666666666663], [351.0, 848.4098360655738], [345.0, 619.5581395348836], [344.0, 478.96551724137925], [347.0, 571.8000000000001], [353.0, 291.94117647058823], [352.0, 475.9673913043479], [354.0, 372.8235294117647], [355.0, 400.62135922330094], [356.0, 349.8549618320611], [357.0, 356.8157894736843], [358.0, 352.01923076923083], [359.0, 423.83505154639175], [361.0, 387.3333333333333], [360.0, 561.5395189003432], [366.0, 348.27722772277235], [367.0, 343.4423076923077], [364.0, 372.50847457627106], [365.0, 352.6230769230768], [363.0, 413.51260504201673], [362.0, 416.00000000000006], [369.0, 326.1888888888889], [368.0, 364.3437500000001], [370.0, 340.73770491803276], [371.0, 371.6333333333334], [372.0, 484.0149253731344], [373.0, 549.5454545454545], [374.0, 459.02898550724643], [375.0, 418.33695652173907], [376.0, 333.6585365853659], [382.0, 463.74418604651174], [383.0, 467.9642857142857], [380.0, 368.1421568627453], [381.0, 390.51515151515133], [377.0, 322.3414634146341], [378.0, 746.6307692307693], [379.0, 523.3843930635841], [385.0, 477.18103448275866], [384.0, 443.8709677419355], [386.0, 442.10714285714283], [387.0, 526.9950495049501], [388.0, 515.4814814814816], [389.0, 772.4510309278353], [390.0, 920.5647058823536], [391.0, 827.3087248322146], [394.0, 1185.07476635514], [395.0, 522.519230769231], [398.0, 613.3636363636361], [399.0, 555.5443037974683], [396.0, 703.4444444444446], [397.0, 847.9259259259261], [402.0, 447.20930232558135], [403.0, 362.02702702702703], [413.0, 569.6175115207376], [412.0, 493.57142857142856], [415.0, 711.6774193548387], [414.0, 498.01428571428585], [404.0, 456.0882352941176], [406.0, 399.503816793893], [407.0, 574.9135802469135], [408.0, 871.3684210526314], [409.0, 668.2765957446811], [410.0, 475.6280991735538], [411.0, 486.58536585365863], [401.0, 417.25], [400.0, 637.4010416666666], [429.0, 524.6785714285714], [425.0, 804.0416666666666], [423.0, 309.9090909090909], [422.0, 521.2], [421.0, 356.75], [420.0, 506.11111111111103], [426.0, 876.188679245283], [427.0, 594.3743589743588], [424.0, 452.0428571428572], [431.0, 1221.2164179104477], [430.0, 1115.36], [428.0, 577.0553191489362], [419.0, 765.6917808219181], [418.0, 452.0], [417.0, 461.0], [416.0, 648.5], [439.0, 647.5714285714286], [435.0, 3190.1000000000004], [433.0, 2614.75], [432.0, 1485.0], [434.0, 1888.1836734693877], [444.0, 364.625], [447.0, 466.58333333333337], [446.0, 425.6666666666667], [445.0, 455.8181818181818], [436.0, 3446.4166666666665], [437.0, 1755.3773584905662], [438.0, 746.4615384615385], [440.0, 769.4117647058819], [441.0, 422.5242718446601], [442.0, 384.1020408163267], [443.0, 377.79999999999995], [450.0, 495.8148148148148], [449.0, 441.46308724832204], [448.0, 604.1090909090912], [451.0, 384.38405797101444], [460.0, 432.62068965517244], [461.0, 442.4946236559139], [463.0, 393.0243902439024], [453.0, 421.93650793650795], [452.0, 393.91666666666663], [454.0, 429.74509803921563], [455.0, 406.595744680851], [456.0, 448.06521739130443], [457.0, 446.0833333333333], [458.0, 407.45454545454567], [459.0, 410.72388059701495], [465.0, 355.4662162162163], [464.0, 352.12037037037055], [466.0, 429.2736842105265], [467.0, 485.2804878048781], [468.0, 476.9375], [469.0, 484.21052631578954], [470.0, 491.08009153318096], [471.0, 408.6103896103896], [473.0, 561.3333333333331], [472.0, 562.1406844106466], [478.0, 1000.5208333333329], [479.0, 356.49230769230786], [477.0, 421.11111111111114], [476.0, 423.5660377358491], [475.0, 572.7238372093022], [474.0, 399.7748691099476], [481.0, 344.1516853932585], [480.0, 432.3700980392158], [482.0, 300.37500000000006], [483.0, 289.93181818181824], [484.0, 331.50497512437795], [485.0, 674.4396039603964], [486.0, 512.871028037383], [487.0, 418.6521739130433], [488.0, 363.1610169491527], [494.0, 520.4576659038901], [495.0, 713.3352601156075], [492.0, 480.8390804597702], [493.0, 527.9622641509429], [489.0, 511.3265306122446], [490.0, 514.0508806262235], [491.0, 463.3546798029556], [496.0, 610.232558139535], [497.0, 723.0362694300518], [498.0, 772.6395348837217], [499.0, 685.9595238095246], [500.0, 837.6912464040402]], "isOverall": false, "label": "GET Homepage", "isController": false}, {"data": [[410.3922599999964, 659.1475199999996]], "isOverall": false, "label": "GET Homepage-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1287.5, "minX": 1.75191942E12, "maxY": 1093577.1333333333, "series": [{"data": [[1.75191954E12, 668932.3666666667], [1.75191942E12, 19733.083333333332], [1.7519196E12, 133456.95], [1.75191948E12, 1093577.1333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75191954E12, 43645.0], [1.75191942E12, 1287.5], [1.7519196E12, 8707.5], [1.75191948E12, 71360.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7519196E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 487.8874533448182, "minX": 1.75191942E12, "maxY": 2883.6757281553378, "series": [{"data": [[1.75191954E12, 593.6396494443807], [1.75191942E12, 2883.6757281553378], [1.7519196E12, 487.8874533448182], [1.75191948E12, 679.9751261210816]], "isOverall": false, "label": "GET Homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7519196E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 485.90841228825644, "minX": 1.75191942E12, "maxY": 2879.687378640779, "series": [{"data": [[1.75191954E12, 592.8947187535813], [1.75191942E12, 2879.687378640779], [1.7519196E12, 485.90841228825644], [1.75191948E12, 678.9352228139016]], "isOverall": false, "label": "GET Homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7519196E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 20.85986547085208, "minX": 1.75191942E12, "maxY": 2351.6893203883487, "series": [{"data": [[1.75191954E12, 37.87719097261993], [1.75191942E12, 2351.6893203883487], [1.7519196E12, 25.262704565030113], [1.75191948E12, 20.85986547085208]], "isOverall": false, "label": "GET Homepage", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7519196E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 239.0, "minX": 1.75191942E12, "maxY": 14794.0, "series": [{"data": [[1.75191954E12, 11053.0], [1.75191942E12, 12621.0], [1.7519196E12, 12370.0], [1.75191948E12, 14794.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75191954E12, 239.0], [1.75191942E12, 242.0], [1.7519196E12, 247.0], [1.75191948E12, 240.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75191954E12, 888.0], [1.75191942E12, 11458.400000000001], [1.7519196E12, 679.0], [1.75191948E12, 1498.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75191954E12, 2357.0499999999993], [1.75191942E12, 12449.2], [1.7519196E12, 2309.0], [1.75191948E12, 4321.970000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75191954E12, 465.0], [1.75191942E12, 394.0], [1.7519196E12, 381.0], [1.75191948E12, 475.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75191954E12, 1464.0], [1.75191942E12, 12024.0], [1.7519196E12, 856.0], [1.75191948E12, 2039.8500000000022]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7519196E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 284.0, "minX": 1.0, "maxY": 10277.5, "series": [{"data": [[3.0, 287.5], [7.0, 382.0], [10.0, 2908.0], [16.0, 284.0], [17.0, 2932.0], [19.0, 331.0], [24.0, 321.0], [31.0, 288.0], [32.0, 508.0], [34.0, 324.0], [37.0, 356.0], [40.0, 7671.0], [43.0, 439.0], [50.0, 601.0], [53.0, 313.5], [57.0, 375.0], [61.0, 481.0], [60.0, 337.0], [65.0, 752.0], [68.0, 716.5], [74.0, 301.0], [77.0, 551.0], [79.0, 588.0], [81.0, 1112.0], [80.0, 355.0], [86.0, 309.0], [94.0, 468.5], [95.0, 1110.0], [98.0, 2529.0], [96.0, 640.5], [102.0, 340.0], [103.0, 452.0], [100.0, 319.0], [117.0, 378.0], [132.0, 509.0], [134.0, 415.0], [131.0, 322.0], [145.0, 368.0], [153.0, 623.0], [152.0, 521.0], [167.0, 376.5], [170.0, 1590.5], [171.0, 365.0], [173.0, 380.0], [175.0, 413.0], [172.0, 346.0], [178.0, 336.0], [179.0, 475.0], [191.0, 445.0], [193.0, 678.0], [195.0, 423.5], [210.0, 488.5], [208.0, 820.0], [231.0, 449.0], [253.0, 343.0], [285.0, 443.0], [272.0, 339.5], [274.0, 523.0], [296.0, 743.5], [318.0, 317.0], [316.0, 572.0], [305.0, 364.0], [334.0, 313.0], [332.0, 343.0], [338.0, 615.0], [341.0, 314.0], [347.0, 535.0], [358.0, 536.0], [369.0, 327.0], [368.0, 402.0], [375.0, 346.0], [391.0, 349.0], [397.0, 341.0], [389.0, 653.0], [410.0, 346.0], [405.0, 1268.0], [403.0, 512.0], [404.0, 393.0], [418.0, 328.0], [428.0, 549.5], [426.0, 362.0], [435.0, 342.0], [445.0, 331.0], [440.0, 370.0], [432.0, 514.0], [451.0, 413.0], [467.0, 372.0], [487.0, 345.0], [491.0, 496.0], [483.0, 502.0], [502.0, 411.5], [519.0, 428.0], [512.0, 437.0], [528.0, 454.5], [521.0, 395.0], [526.0, 508.0], [516.0, 365.0], [552.0, 366.0], [565.0, 404.0], [567.0, 476.0], [573.0, 480.0], [572.0, 476.0], [557.0, 482.0], [560.0, 426.0], [586.0, 340.0], [579.0, 470.0], [606.0, 479.0], [596.0, 507.5], [604.0, 472.0], [599.0, 480.0], [603.0, 475.0], [612.0, 473.0], [621.0, 565.0], [620.0, 468.0], [632.0, 474.0], [625.0, 476.0], [626.0, 484.5], [630.0, 459.5], [622.0, 478.0], [623.0, 478.0], [608.0, 478.0], [609.0, 567.0], [624.0, 459.0], [639.0, 476.0], [618.0, 476.0], [614.0, 476.0], [663.0, 592.0], [649.0, 479.0], [652.0, 509.0], [660.0, 420.5], [659.0, 518.0], [683.0, 470.0], [1.0, 466.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[660.0, 10277.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 683.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 284.0, "minX": 1.0, "maxY": 10277.5, "series": [{"data": [[3.0, 287.5], [7.0, 382.0], [10.0, 2908.0], [16.0, 284.0], [17.0, 2932.0], [19.0, 331.0], [24.0, 321.0], [31.0, 288.0], [32.0, 508.0], [34.0, 324.0], [37.0, 356.0], [40.0, 7671.0], [43.0, 439.0], [50.0, 601.0], [53.0, 302.5], [57.0, 375.0], [61.0, 481.0], [60.0, 337.0], [65.0, 752.0], [68.0, 716.5], [74.0, 301.0], [77.0, 551.0], [79.0, 588.0], [81.0, 1109.0], [80.0, 355.0], [86.0, 309.0], [94.0, 467.0], [95.0, 1110.0], [98.0, 2529.0], [96.0, 623.5], [102.0, 339.5], [103.0, 452.0], [100.0, 319.0], [117.0, 378.0], [132.0, 509.0], [134.0, 415.0], [131.0, 322.0], [145.0, 368.0], [153.0, 623.0], [152.0, 521.0], [167.0, 370.5], [170.0, 1590.5], [171.0, 365.0], [173.0, 380.0], [175.0, 413.0], [172.0, 346.0], [178.0, 336.0], [179.0, 475.0], [191.0, 445.0], [193.0, 677.5], [195.0, 423.5], [210.0, 488.5], [208.0, 820.0], [231.0, 449.0], [253.0, 343.0], [285.0, 443.0], [272.0, 339.0], [274.0, 522.0], [296.0, 743.5], [318.0, 317.0], [316.0, 572.0], [305.0, 364.0], [334.0, 312.0], [332.0, 342.5], [338.0, 614.5], [341.0, 314.0], [347.0, 534.0], [358.0, 536.0], [369.0, 326.0], [368.0, 401.5], [375.0, 345.0], [391.0, 348.0], [397.0, 340.0], [389.0, 653.0], [410.0, 345.0], [405.0, 1268.0], [403.0, 512.0], [404.0, 393.0], [418.0, 325.5], [428.0, 549.0], [426.0, 362.0], [435.0, 341.0], [445.0, 330.0], [440.0, 370.0], [432.0, 514.0], [451.0, 412.0], [467.0, 372.0], [487.0, 343.0], [491.0, 495.0], [483.0, 502.0], [502.0, 411.0], [519.0, 428.0], [512.0, 437.0], [528.0, 454.0], [521.0, 394.0], [526.0, 508.0], [516.0, 364.0], [552.0, 365.0], [565.0, 403.0], [567.0, 476.0], [573.0, 479.0], [572.0, 476.0], [557.0, 481.0], [560.0, 426.0], [586.0, 339.5], [579.0, 469.5], [606.0, 479.0], [596.0, 502.5], [604.0, 471.0], [599.0, 479.0], [603.0, 474.0], [612.0, 472.0], [621.0, 564.0], [620.0, 468.0], [632.0, 473.0], [625.0, 476.0], [626.0, 483.0], [630.0, 459.0], [622.0, 478.0], [623.0, 478.0], [608.0, 477.5], [609.0, 567.0], [624.0, 458.0], [639.0, 476.0], [618.0, 475.0], [614.0, 475.0], [663.0, 591.0], [649.0, 477.0], [652.0, 505.0], [660.0, 419.0], [659.0, 517.0], [683.0, 469.0], [1.0, 466.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[660.0, 10277.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 683.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.066666666666666, "minX": 1.75191942E12, "maxY": 480.48333333333335, "series": [{"data": [[1.75191954E12, 284.78333333333336], [1.75191942E12, 10.066666666666666], [1.7519196E12, 58.0], [1.75191948E12, 480.48333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7519196E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.75191942E12, "maxY": 475.6666666666667, "series": [{"data": [[1.75191954E12, 290.96666666666664], [1.75191942E12, 8.583333333333334], [1.7519196E12, 58.05], [1.75191948E12, 475.6666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75191948E12, 0.06666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7519196E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.75191942E12, "maxY": 475.6666666666667, "series": [{"data": [[1.75191948E12, 0.06666666666666667]], "isOverall": false, "label": "GET Homepage-failure", "isController": false}, {"data": [[1.75191954E12, 290.96666666666664], [1.75191942E12, 8.583333333333334], [1.7519196E12, 58.05], [1.75191948E12, 475.6666666666667]], "isOverall": false, "label": "GET Homepage-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7519196E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.75191942E12, "maxY": 475.6666666666667, "series": [{"data": [[1.75191954E12, 290.96666666666664], [1.75191942E12, 8.583333333333334], [1.7519196E12, 58.05], [1.75191948E12, 475.6666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75191948E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7519196E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

